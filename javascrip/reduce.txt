blog from https://jrsinclair.com/articles/2019/functional-js-do-more-with-reduce/
https://thecodebarbarian.com/javascript-reduce-in-5-examples.html
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce

syntax
array.reduce(function(total, currentValue, currentIndex, arr), initialValue)

The signature for the reduce array method in JavaScript is:

arr.reduce(callback, initialValue);


Definition and Usage

The reduce() method reduces the array to a single value.

The reduce() method executes a provided function for each value of the array (from left-to-right).

The return value of the function is stored in an accumulator (result/total).

Note: reduce() does not execute the function for array elements without values.

Note: This method does not change the original array.

Reduce is the Swiss-army knife of array iterators. It’s really powerful. So powerful, you can
 build most of the other array iterator methods with it, like .map(), .filter() and .flatMap(). 
And in this article we’ll look at some more amazing things you can do with it. But, if you’re new 
to array iterator methods, .reduce() can be confusing at first.

function fizzBuzzReducer(acc, element) {
    if (element % 15 === 0) return `${acc}Fizz Buzz\n`;
    if (element % 5 === 0) return `${acc}Fizz\n`;
    if (element % 3 === 0) return `${acc}Buzz\n`;
    return `${acc}${element}\n`;
}

const nums = [
    1, 2, 3, 4, 5, 6, 7, 8, 9,
    10, 11, 12, 13, 14, 15
];

console.log(nums.reduce(fizzBuzzReducer, ''));


self closing element in html
    <br>
    <embed>
    <hr>
    <img>
    <input>
    <link>
    <meta>
    <param>
    <source>
    <wbr>

const array1 = [1, 2, 3, 4];
const reducer = (accumulator, currentValue) => accumulator + currentValue;

// 1 + 2 + 3 + 4
console.log(array1.reduce(reducer));
// expected output: 10

// 5 + 1 + 2 + 3 + 4
console.log(array1.reduce(reducer, 5));
// expected output: 15
