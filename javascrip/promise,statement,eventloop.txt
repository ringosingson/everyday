blog -- https://dev.to/promhize/javascript-in-depth-all-you-need-to-know-about-expressions-statements-and-expression-statements-5k2

function funcDeclaration() {
    return 'A function declaration';
}

var funcExpression = function () {
    return 'A function expression';
}


--Differences between Declarations and Expressions
 --Similar to the var statement, function declarations are hoisted to the top of other code.
     Function expressions aren’t hoisted
  --Function declarations load before any code is executed while Function expressions load 
    only when the interpreter reaches that line of code.
 
  Example: Function Expression
     alert(foo()); // ERROR! foo wasn't loaded yet
    var foo = function() { return 5; }

   Example: Function Declaration
    alert(foo()); // Alerts 5. Declarations are loaded before any code can run.
    function foo() { return 5; }
    
Benefits of Function Expressions
There are several different ways that function expressions become more useful than function 
declarations.

1.As closures
2.As arguments to other functions(callback)
3.As Immediately Invoked Function Expressions (IIFE)


Immediately Invoked Function Expressions (IIFE)
IIFE’s are used to help prevent your functions and variables from affecting the global scope.
 All the properties within are scoped to the anonymous function. This is a common design pattern 
that’s used to prevent your code from having unwanted or undesired side-effects elsewhere.
A simple example of an IIFE is:

(function () {
    // code in here
}());

even loop
-- https://flaviocopes.com/javascript-event-loop/

The call stack is a LIFO queue (Last In, First Out)

The DOM is modified by client-side JavaScript
--  https://zellwk.com/blog/dom-traversals/

---https://medium.com/@js_tut/map-filter-and-reduce-animated-7fe391a35a47
---https://dev.to/uptheirons78/map-filter-reduce-and-others-arrays-iterators-you-must-know-to-become-an-algorithms-wizard-4209