colt explain;

asking dragon if a given list is odd ?
//calling the list over and over again(making it smaller)
until it stop.

what is recursion?
a process(a function in our case) that calls itself.
- invoke the same function with a different input until you reach your base case

eg. in JSON.parse/JSON.stringify, document.getElementById and
DOM traversal algorithms, object traversal

The Call Stack
- it's a stack data structure
- anytime a function is invoked it is placed(pushed) on top
  of the call stack
- when javaScript sees the return keyword or when the function ends,
  the compiler will remove(pop)

Two essential parts of a recursive function
- base case (the condition when the recursion ends)
- different input

eg code.
 function countDown(num){
  if(num<=0){
      console.log('all done')
      return
  }
  console.log(num);
  num--;
  countDown(num)
}
countDown(5) // 5 4 3 2 1 all done

factorial recursively--

function factorial(num){
  if(num===1) return 1
  return num * factorial(num-1)
}




